import { Notification } from '../models/notification.model';
import { Op } from 'sequelize';

export class NotificationCleanupService {
  /**
   * Elimina notificaciones le√≠das que tengan m√°s de 2 d√≠as
   */
  static async cleanupOldReadNotifications(): Promise<number> {
    try {
      // Calcular fecha l√≠mite (2 d√≠as atr√°s)
      const twoDaysAgo = new Date();
      twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);

      // Eliminar notificaciones le√≠das m√°s antiguas que 2 d√≠as
      const deletedCount = await Notification.destroy({
        where: {
          read: true,
          updatedAt: {
            [Op.lt]: twoDaysAgo
          }
        }
      });

      console.log(`üßπ Limpieza de notificaciones: ${deletedCount} notificaciones eliminadas`);
      return deletedCount;
    } catch (error) {
      console.error('‚ùå Error en limpieza de notificaciones:', error);
      throw error;
    }
  }

  /**
   * Obtiene estad√≠sticas de notificaciones antes de la limpieza
   */
  static async getNotificationStats(): Promise<{
    total: number;
    read: number;
    unread: number;
    oldRead: number;
  }> {
    try {
      const twoDaysAgo = new Date();
      twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);

      const [total, read, unread, oldRead] = await Promise.all([
        Notification.count(),
        Notification.count({ where: { read: true } }),
        Notification.count({ where: { read: false } }),
        Notification.count({
          where: {
            read: true,
            updatedAt: {
              [Op.lt]: twoDaysAgo
            }
          }
        })
      ]);

      return { total, read, unread, oldRead };
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas de notificaciones:', error);
      throw error;
    }
  }

  /**
   * Ejecuta limpieza con logging detallado
   */
  static async runCleanupWithLogging(): Promise<void> {
    try {
      console.log('üîç Iniciando limpieza de notificaciones...');
      
      // Obtener estad√≠sticas antes de la limpieza
      const statsBefore = await this.getNotificationStats();
      console.log('üìä Estad√≠sticas antes de limpieza:', {
        total: statsBefore.total,
        le√≠das: statsBefore.read,
        noLe√≠das: statsBefore.unread,
        le√≠dasAntiguas: statsBefore.oldRead
      });

      // Ejecutar limpieza
      const deletedCount = await this.cleanupOldReadNotifications();

      // Obtener estad√≠sticas despu√©s de la limpieza
      const statsAfter = await this.getNotificationStats();
      console.log('üìä Estad√≠sticas despu√©s de limpieza:', {
        total: statsAfter.total,
        le√≠das: statsAfter.read,
        noLe√≠das: statsAfter.unread,
        eliminadas: deletedCount
      });

      console.log('‚úÖ Limpieza de notificaciones completada exitosamente');
    } catch (error) {
      console.error('‚ùå Error en limpieza de notificaciones:', error);
    }
  }
}